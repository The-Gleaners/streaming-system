import java.util.zip.ZipFile

plugins {
    id "com.github.davidmc24.gradle.plugin.avro" version "1.7.1"
}

description = "Data Download Module"

bootJar {
    enabled = true
}

jar {
    enabled = true
}

ext {
    awaitilityVersion = "4.2.0"
}

configurations {
    additionalSchema
}

generateAvroJava {
    dependsOn configurations.additionalSchema
    source {
        configurations.additionalSchema.collect { zipTree(it) }
    }
}

dependencies {
    implementation "org.springframework.kafka:spring-kafka"
    implementation "org.apache.avro:avro:1.11.0"
    implementation 'io.confluent:kafka-schema-registry-client:7.3.3'
    implementation 'io.confluent:kafka-avro-serializer:7.3.3'

    additionalSchema project(":avro")

    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'
    testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.8.RELEASE'
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "org.springframework.kafka:spring-kafka-test"
    testImplementation("org.awaitility:awaitility:$awaitilityVersion") {
        exclude group: 'org.hamcrest'
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(Test).configureEach {
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
        jvmArgs += [
                "-XX:+AllowRedefinitionToAddDeleteMethods"
        ]
    }
}

def configureJar = tasks.register("configureJar") {
    it.doLast {
        tasks.jar.exclude(
                configurations.additionalSchema
                        .findAll { it.name.endsWith("jar") }
                        .collect { File file ->
                            new ZipFile(file).entries()
                                    .findAll { it.name.endsWith(".class") }
                                    .collect { it.name }
                        }
                        .flatten() as Iterable<String>
        )
    }
    it.dependsOn(tasks.classes)
}

tasks.named("jar") {
    it.dependsOn(configureJar)
}

task runDockerCompose() {
    dependsOn cloneInfraRepo
    dependsOn kafkaStackComposeUp
    dependsOn mongoDBStackComposeUp

    kafkaStackComposeUp.mustRunAfter cloneInfraRepo
    mongoDBStackComposeUp.mustRunAfter cloneInfraRepo
}
